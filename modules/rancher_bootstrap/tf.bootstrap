provider "rancher2" {
  api_url   = "https://${local.rancher_domain}"
  insecure  = false
  bootstrap = true
}

locals {
  rancher_domain          = var.project_domain
  rancher_version         = replace(var.rancher_version, "v", "") # don't include the v
  rancher_helm_repository = var.rancher_helm_repository
  cert_manager_version    = var.cert_manager_version
  project_cert_name       = var.project_cert_name
  project_cert_key_id     = var.project_cert_key_id
}

resource "time_sleep" "settle_before_cert_manager" {
  create_duration = "30s"
}

data "aws_iam_server_certificate" "project_domain" {
  name = local.project_cert_name
}

data "aws_secretsmanager_secret_version" "rancher_private_key" {
  secret_id = local.project_cert_key_id
}

resource "kubernetes_namespace" "cattle_system" {
  depends_on = [
    time_sleep.settle_before_cert_manager,
  ]
  metadata {
    name = "cattle-system"
  }
  lifecycle {
    ignore_changes = [
      metadata,
    ]
  }
  provisioner "local-exec" {
    command = <<-EOT
    kubectl get namespace "cattle-system" -o json  \
     | tr -d "\n" \
     | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/"   \
     | kubectl replace --raw /api/v1/namespaces/cattle-system/finalize -f -
    EOT
    when = destroy
  }
  provisioner "local-exec" {
    command = <<-EOT
      sleep 15
    EOT
    when = destroy
  }
}

resource "kubernetes_secret" "tls_rancher_ingress" {
  depends_on = [
    time_sleep.settle_before_cert_manager,
    kubernetes_namespace.cattle_system,
  ]
  metadata {
    name      = "tls-rancher-ingress"
    namespace = "cattle-system"
  }
  type = "kubernetes.io/tls"
  data = {
    "tls.crt" = data.aws_iam_server_certificate.project_domain.certificate_body,
    "tls.key" = data.aws_secretsmanager_secret_version.rancher_private_key.secret_string,
  }
}

resource "helm_release" "cert_manager" {
  depends_on = [
    time_sleep.settle_before_cert_manager,
    kubernetes_namespace.cattle_system,
    kubernetes_secret.tls_rancher_ingress,
  ]
  name             = "cert-manager"
  repository       = "https://charts.jetstack.io"
  chart            = "cert-manager"
  version          = local.cert_manager_version
  namespace        = "cert-manager"
  create_namespace = true
  wait             = false
  wait_for_jobs    = false
  force_update     = true
  timeout          = 1200 # 20m

  set {
    name  = "installCRDs"
    value = "true"
  }
}

resource "time_sleep" "settle_before_rancher" {
  depends_on = [
    kubernetes_namespace.cattle_system,
    kubernetes_secret.tls_rancher_ingress,
    time_sleep.settle_before_cert_manager,
    helm_release.cert_manager,
  ]
  create_duration = "30s"
}

resource "helm_release" "rancher_server" {
  depends_on = [
    kubernetes_namespace.cattle_system,
    kubernetes_secret.tls_rancher_ingress,
    time_sleep.settle_before_cert_manager,
    helm_release.cert_manager,
    time_sleep.settle_before_rancher,
  ]
  name             = "rancher"
  chart            = "${local.rancher_helm_repository}/rancher-${local.rancher_version}.tgz"
  namespace        = "cattle-system"
  create_namespace = false
  wait             = true
  wait_for_jobs    = false
  force_update     = true
  timeout          = 2400 # 40m

  set {
    name  = "hostname"
    value = local.rancher_domain
  }
  set {
    name  = "ingress.enabled"
    value = "true"
  }
  set {
    name  = "replicas"
    value = "2"
  }
  set {
    name  = "bootstrapPassword"
    value = "admin"
  }
  set {
    name  = "ingress.tls.source"
    value = "secret"
  }
  set {
    name  = "ingress.tls.secretName"
    value = kubernetes_secret.tls_rancher_ingress.metadata[0].name
  }
  set {
    name  = "certmanager.version"
    value = local.cert_manager_version
  }
  set {
    name  = "ingress.extraAnnotations.kubernetes\\.io\\/ingress\\.class"
    value = "nginx"
  }
}

resource "time_sleep" "settle_after_rancher" {
  depends_on = [
    kubernetes_namespace.cattle_system,
    kubernetes_secret.tls_rancher_ingress,
    time_sleep.settle_before_cert_manager,
    helm_release.cert_manager,
    time_sleep.settle_before_rancher,
    helm_release.rancher_server,
  ]
  create_duration = "90s"
}

resource "random_password" "password" {
  length           = 16
  special          = true
  override_special = "!$%&-_=+"
}

resource "rancher2_bootstrap" "admin" {
  depends_on = [
    kubernetes_namespace.cattle_system,
    kubernetes_secret.tls_rancher_ingress,
    time_sleep.settle_before_cert_manager,
    helm_release.cert_manager,
    time_sleep.settle_before_rancher,
    helm_release.rancher_server,
    time_sleep.settle_after_rancher,
  ]
  password  = random_password.password.result
  telemetry = false
}
